// Code generated by mockery v2.53.3. DO NOT EDIT.

package user

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, user
func (_m *MockRepository) Create(ctx context.Context, user User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - user User
func (_e *MockRepository_Expecter) Create(ctx interface{}, user interface{}) *MockRepository_Create_Call {
	return &MockRepository_Create_Call{Call: _e.mock.On("Create", ctx, user)}
}

func (_c *MockRepository_Create_Call) Run(run func(ctx context.Context, user User)) *MockRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(User))
	})
	return _c
}

func (_c *MockRepository_Create_Call) Return(_a0 error) *MockRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Create_Call) RunAndReturn(run func(context.Context, User) error) *MockRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteToken provides a mock function with given fields: ctx, username
func (_m *MockRepository) DeleteToken(ctx context.Context, username string) error {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for DeleteToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_DeleteToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteToken'
type MockRepository_DeleteToken_Call struct {
	*mock.Call
}

// DeleteToken is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockRepository_Expecter) DeleteToken(ctx interface{}, username interface{}) *MockRepository_DeleteToken_Call {
	return &MockRepository_DeleteToken_Call{Call: _e.mock.On("DeleteToken", ctx, username)}
}

func (_c *MockRepository_DeleteToken_Call) Run(run func(ctx context.Context, username string)) *MockRepository_DeleteToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_DeleteToken_Call) Return(_a0 error) *MockRepository_DeleteToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_DeleteToken_Call) RunAndReturn(run func(context.Context, string) error) *MockRepository_DeleteToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUsername provides a mock function with given fields: ctx, username
func (_m *MockRepository) GetByUsername(ctx context.Context, username string) (User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetByUsername")
	}

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUsername'
type MockRepository_GetByUsername_Call struct {
	*mock.Call
}

// GetByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockRepository_Expecter) GetByUsername(ctx interface{}, username interface{}) *MockRepository_GetByUsername_Call {
	return &MockRepository_GetByUsername_Call{Call: _e.mock.On("GetByUsername", ctx, username)}
}

func (_c *MockRepository_GetByUsername_Call) Run(run func(ctx context.Context, username string)) *MockRepository_GetByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_GetByUsername_Call) Return(_a0 User, _a1 error) *MockRepository_GetByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetByUsername_Call) RunAndReturn(run func(context.Context, string) (User, error)) *MockRepository_GetByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetFieldsByUsername provides a mock function with given fields: ctx, username, fields
func (_m *MockRepository) GetFieldsByUsername(ctx context.Context, username string, fields ...string) (User, error) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, username)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFieldsByUsername")
	}

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) (User, error)); ok {
		return rf(ctx, username, fields...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) User); ok {
		r0 = rf(ctx, username, fields...)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...string) error); ok {
		r1 = rf(ctx, username, fields...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetFieldsByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFieldsByUsername'
type MockRepository_GetFieldsByUsername_Call struct {
	*mock.Call
}

// GetFieldsByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - fields ...string
func (_e *MockRepository_Expecter) GetFieldsByUsername(ctx interface{}, username interface{}, fields ...interface{}) *MockRepository_GetFieldsByUsername_Call {
	return &MockRepository_GetFieldsByUsername_Call{Call: _e.mock.On("GetFieldsByUsername",
		append([]interface{}{ctx, username}, fields...)...)}
}

func (_c *MockRepository_GetFieldsByUsername_Call) Run(run func(ctx context.Context, username string, fields ...string)) *MockRepository_GetFieldsByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockRepository_GetFieldsByUsername_Call) Return(_a0 User, _a1 error) *MockRepository_GetFieldsByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetFieldsByUsername_Call) RunAndReturn(run func(context.Context, string, ...string) (User, error)) *MockRepository_GetFieldsByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetToken provides a mock function with given fields: ctx, username
func (_m *MockRepository) GetToken(ctx context.Context, username string) (Token, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetToken")
	}

	var r0 Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (Token, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) Token); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(Token)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetToken'
type MockRepository_GetToken_Call struct {
	*mock.Call
}

// GetToken is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockRepository_Expecter) GetToken(ctx interface{}, username interface{}) *MockRepository_GetToken_Call {
	return &MockRepository_GetToken_Call{Call: _e.mock.On("GetToken", ctx, username)}
}

func (_c *MockRepository_GetToken_Call) Run(run func(ctx context.Context, username string)) *MockRepository_GetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_GetToken_Call) Return(_a0 Token, _a1 error) *MockRepository_GetToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetToken_Call) RunAndReturn(run func(context.Context, string) (Token, error)) *MockRepository_GetToken_Call {
	_c.Call.Return(run)
	return _c
}

// SaveToken provides a mock function with given fields: ctx, username, token
func (_m *MockRepository) SaveToken(ctx context.Context, username string, token Token) error {
	ret := _m.Called(ctx, username, token)

	if len(ret) == 0 {
		panic("no return value specified for SaveToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, Token) error); ok {
		r0 = rf(ctx, username, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_SaveToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveToken'
type MockRepository_SaveToken_Call struct {
	*mock.Call
}

// SaveToken is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - token Token
func (_e *MockRepository_Expecter) SaveToken(ctx interface{}, username interface{}, token interface{}) *MockRepository_SaveToken_Call {
	return &MockRepository_SaveToken_Call{Call: _e.mock.On("SaveToken", ctx, username, token)}
}

func (_c *MockRepository_SaveToken_Call) Run(run func(ctx context.Context, username string, token Token)) *MockRepository_SaveToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(Token))
	})
	return _c
}

func (_c *MockRepository_SaveToken_Call) Return(_a0 error) *MockRepository_SaveToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_SaveToken_Call) RunAndReturn(run func(context.Context, string, Token) error) *MockRepository_SaveToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
