// Code generated by mockery v2.53.3. DO NOT EDIT.

package user

import mock "github.com/stretchr/testify/mock"

// MockAuthService is an autogenerated mock type for the AuthService type
type MockAuthService struct {
	mock.Mock
}

type MockAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthService) EXPECT() *MockAuthService_Expecter {
	return &MockAuthService_Expecter{mock: &_m.Mock}
}

// GenerateToken provides a mock function with given fields: user
func (_m *MockAuthService) GenerateToken(user User) (Token, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 Token
	var r1 error
	if rf, ok := ret.Get(0).(func(User) (Token, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(User) Token); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(Token)
	}

	if rf, ok := ret.Get(1).(func(User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthService_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type MockAuthService_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - user User
func (_e *MockAuthService_Expecter) GenerateToken(user interface{}) *MockAuthService_GenerateToken_Call {
	return &MockAuthService_GenerateToken_Call{Call: _e.mock.On("GenerateToken", user)}
}

func (_c *MockAuthService_GenerateToken_Call) Run(run func(user User)) *MockAuthService_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(User))
	})
	return _c
}

func (_c *MockAuthService_GenerateToken_Call) Return(_a0 Token, _a1 error) *MockAuthService_GenerateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_GenerateToken_Call) RunAndReturn(run func(User) (Token, error)) *MockAuthService_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatePassword provides a mock function with given fields: requestPassword, userPassword
func (_m *MockAuthService) ValidatePassword(requestPassword string, userPassword string) error {
	ret := _m.Called(requestPassword, userPassword)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(requestPassword, userPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthService_ValidatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatePassword'
type MockAuthService_ValidatePassword_Call struct {
	*mock.Call
}

// ValidatePassword is a helper method to define mock.On call
//   - requestPassword string
//   - userPassword string
func (_e *MockAuthService_Expecter) ValidatePassword(requestPassword interface{}, userPassword interface{}) *MockAuthService_ValidatePassword_Call {
	return &MockAuthService_ValidatePassword_Call{Call: _e.mock.On("ValidatePassword", requestPassword, userPassword)}
}

func (_c *MockAuthService_ValidatePassword_Call) Run(run func(requestPassword string, userPassword string)) *MockAuthService_ValidatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockAuthService_ValidatePassword_Call) Return(_a0 error) *MockAuthService_ValidatePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthService_ValidatePassword_Call) RunAndReturn(run func(string, string) error) *MockAuthService_ValidatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthService creates a new instance of MockAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthService {
	mock := &MockAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
