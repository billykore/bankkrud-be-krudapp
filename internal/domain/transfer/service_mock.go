// Code generated by mockery v2.53.3. DO NOT EDIT.

package transfer

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Transfer provides a mock function with given fields: ctx, srcAccountNumber, destAccountNumber, amount, remark
func (_m *MockService) Transfer(ctx context.Context, srcAccountNumber string, destAccountNumber string, amount int64, remark string) (Transfer, error) {
	ret := _m.Called(ctx, srcAccountNumber, destAccountNumber, amount, remark)

	if len(ret) == 0 {
		panic("no return value specified for Transfer")
	}

	var r0 Transfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, string) (Transfer, error)); ok {
		return rf(ctx, srcAccountNumber, destAccountNumber, amount, remark)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, string) Transfer); ok {
		r0 = rf(ctx, srcAccountNumber, destAccountNumber, amount, remark)
	} else {
		r0 = ret.Get(0).(Transfer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, string) error); ok {
		r1 = rf(ctx, srcAccountNumber, destAccountNumber, amount, remark)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Transfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transfer'
type MockService_Transfer_Call struct {
	*mock.Call
}

// Transfer is a helper method to define mock.On call
//   - ctx context.Context
//   - srcAccountNumber string
//   - destAccountNumber string
//   - amount int64
//   - remark string
func (_e *MockService_Expecter) Transfer(ctx interface{}, srcAccountNumber interface{}, destAccountNumber interface{}, amount interface{}, remark interface{}) *MockService_Transfer_Call {
	return &MockService_Transfer_Call{Call: _e.mock.On("Transfer", ctx, srcAccountNumber, destAccountNumber, amount, remark)}
}

func (_c *MockService_Transfer_Call) Run(run func(ctx context.Context, srcAccountNumber string, destAccountNumber string, amount int64, remark string)) *MockService_Transfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int64), args[4].(string))
	})
	return _c
}

func (_c *MockService_Transfer_Call) Return(_a0 Transfer, _a1 error) *MockService_Transfer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Transfer_Call) RunAndReturn(run func(context.Context, string, string, int64, string) (Transfer, error)) *MockService_Transfer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
