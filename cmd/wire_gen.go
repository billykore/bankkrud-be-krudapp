// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/labstack/echo/v4"
	"go.bankkrud.com/backend/svc/tapmoney/internal/adapter/api"
	"go.bankkrud.com/backend/svc/tapmoney/internal/adapter/http/handler"
	"go.bankkrud.com/backend/svc/tapmoney/internal/adapter/http/server"
	"go.bankkrud.com/backend/svc/tapmoney/internal/adapter/log"
	"go.bankkrud.com/backend/svc/tapmoney/internal/adapter/storage/repo"
	"go.bankkrud.com/backend/svc/tapmoney/internal/pkg/config"
	"go.bankkrud.com/backend/svc/tapmoney/internal/pkg/db/postgres"
	"go.bankkrud.com/backend/svc/tapmoney/internal/pkg/httpclient"
	"go.bankkrud.com/backend/svc/tapmoney/internal/pkg/validation"
	tapmoney2 "go.bankkrud.com/backend/svc/tapmoney/internal/usecase/tapmoney"
)

// Injectors from wire.go:

func initTapMoney(cfg *config.Configs) *tapmoney {
	zapLogger := log.NewZap()
	echoEcho := echo.New()
	validator := validation.New()
	db := postgres.New(cfg)
	transactionRepo := repo.NewTransactionRepo(db)
	pocketRepo := repo.NewPocketRepo(db)
	client := httpclient.New()
	paymentGateway := api.NewPaymentGateway(cfg, client)
	usecase := tapmoney2.NewUsecase(zapLogger, transactionRepo, pocketRepo, paymentGateway)
	tapMoneyHandler := handler.NewTapMoneyHandler(validator, usecase)
	serverServer := server.New(cfg, zapLogger, echoEcho, tapMoneyHandler)
	mainTapmoney := newTapMoney(serverServer)
	return mainTapmoney
}
